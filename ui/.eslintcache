[{"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/reportWebVitals.js":"1","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/App.js":"2","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/BarChart.js":"3","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/Circle.js":"4","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/index.js":"5","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/data/mockData.js":"6","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/views/Dashboard.js":"7","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/App.js":"8","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/data/mockData.js":"9","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/Dashboard.js":"10","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/reportWebVitals.js":"11","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/MainLayout.js":"12","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/index.js":"13","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/components/SimulationForm.js":"14"},{"size":362,"mtime":1607031838599,"results":"15","hashOfConfig":"16"},{"size":1963,"mtime":1607436332564,"results":"17","hashOfConfig":"16"},{"size":1560,"mtime":1607036866046,"results":"18","hashOfConfig":"16"},{"size":238,"mtime":1607035286364,"results":"19","hashOfConfig":"16"},{"size":500,"mtime":1607031838597,"results":"20","hashOfConfig":"16"},{"size":1809,"mtime":1607435973925,"results":"21","hashOfConfig":"16"},{"size":2519,"mtime":1607445013921,"results":"22","hashOfConfig":"16"},{"size":2192,"mtime":1609248860949,"results":"23","hashOfConfig":"24"},{"size":1902,"mtime":1609248860951,"results":"25","hashOfConfig":"24"},{"size":2195,"mtime":1609724111763,"results":"26","hashOfConfig":"24"},{"size":362,"mtime":1609248860779,"results":"27","hashOfConfig":"24"},{"size":6600,"mtime":1609724086012,"results":"28","hashOfConfig":"24"},{"size":455,"mtime":1609705634275,"results":"29","hashOfConfig":"24"},{"size":18691,"mtime":1609723794839,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1si8j8n",{"filePath":"34","messages":"35","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"1ug1myt",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"49"},"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/reportWebVitals.js",[],["63","64"],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/App.js",["65","66","67","68","69","70","71","72","73","74","75","76","77"],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/BarChart.js",["78","79","80"],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/Circle.js",[],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/index.js",[],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/data/mockData.js",[],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/views/Dashboard.js",["81"],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/App.js",["82","83","84","85","86","87","88","89","90","91","92"],"import './App.css';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport Dashboard from './views/Dashboard';\nimport Layout from \"./views/MainLayout\";\nfunction App() {\n\n  function genRandomTree(N = 300, reverse = false) {\n    return {\n      nodes: [...Array(N).keys()].map(i => ({ id: i })),\n        links: [...Array(N).keys()]\n      .filter(id => id)\n      .map(id => ({\n        [reverse ? 'target' : 'source']: id,\n        [reverse ? 'source' : 'target']: Math.round(Math.random() * (id-1))\n      }))\n    };\n  }\n\n  var myData = require('./data/miserables.json'); //with path\n  var testData = require('./data/test.json'); //with path\n\n  var randomData = genRandomTree(500, false);\n  const getColor = n => '#' + ((n * 1234567) % Math.pow(2, 24)).toString(16).padStart(6, '0');\n  \n  // states: 0 - susceptible, 1 - asymptomatic, 2 - infected, 3 - vaccinated, 4 - rehabed\n  const getStateColor = (n) => {\n    switch (n) {\n      case 0:\n        return '#03c4a1';\n      case 1:\n        return '#590995';\n      case 2:\n        return '#c62a88';\n      case 3:\n        return '#61b15a';\n      case 4:\n        return '#150485';\n      default:\n        return '#33b2ff';\n    }\n  } \n  console.log(testData);\n  const { useRef } = React;\n  const fgRef = useRef();\n\n  return (\n    <div className=\"App\">\n      {/* <section className=\"Main\" >\n        <h3>Test Data (with states)</h3>\n        <ForceGraph2D \n          graphData={testData} \n          enableZoomPanInteraction={false}\n          nodeLabel=\"state\"\n          nodeCanvasObject={({ state, x, y }, ctx) => {\n            ctx.fillStyle = getStateColor(state);\n            ctx.beginPath(); ctx.arc(x, y, 5, 0, 2 * Math.PI, false); ctx.fill(); // circle\n          }}\n        />\n        <h3>Randomly Generated Data</h3>\n        <ForceGraph2D \n          ref={fgRef}\n          graphData={randomData} \n          enableZoomPanInteraction={false}\n          nodeLabel=\"state\"\n          nodeAutoColorBy={d => d.id%5}\n          onEngineStop={() => fgRef.current.zoomToFit(400)}\n        />\n        <Dashboard />\n      </section> */}\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n",["93","94"],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/data/mockData.js",[],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/Dashboard.js",["95","96","97","98"],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/reportWebVitals.js",[],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/MainLayout.js",["99","100","101","102","103","104","105","106","107"],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/index.js",[],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/components/SimulationForm.js",["108","109"],"import React, { useState } from 'react';\nimport { Button, Collapse, Input, Radio, Select, Slider, Switch } from 'antd';\nimport Form from 'antd/lib/form/Form';\nimport FormItem from 'antd/lib/form/FormItem';\nimport FormList from 'antd/lib/form/FormList';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nconst { Panel } = Collapse;\nconst { Option } = Select;\nconst text = 'testing the collapse panels';\nconst layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16,\n    },\n  };\n\n\n  const formItemLayout = {\n    labelCol: {\n        span: 4,\n    },\n    wrapperCol: {\n        span: 24\n    },\n  };\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: { span: 24, offset: 4 },\n      sm: { span: 20, offset: 4 },\n    },\n  };\nfunction Region({fields, field, remove}) {\n    return(\n        <Collapse>\n            <Panel \n                header={`Region ${field.key}`} \n                key={field.key} \n                extra={\n                    fields.length > 1 ? (\n                    <MinusCircleOutlined\n                    className=\"dynamic-delete-button\"\n                    onClick={() => remove(field.name)} \n                    />) : null\n                    }\n            >\n                <FormItem\n                    {...formItemLayout}\n                    // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    // label={index === 0 ? 'Label' : ''}\n                    required={false}\n                    key={field.key}\n                    noStyle\n                >\n                    <FormItem\n                        {...field}\n                        label=\"Type\"\n                        labelCol={{span: 8}}\n                        wrapperCol={{span:20}}                        \n                        name={[field.name, 'graph_type']}\n                        fieldKey={[field.fieldKey, 'graph_type']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Radio.Group>\n                            <Radio.Button value=\"nw_small_world\">Small World</Radio.Button>\n                            <Radio.Button value=\"matrix\">Matrix</Radio.Button>\n\n                        </Radio.Group>\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Population\"\n                        labelCol={{span: 8}}\n                        wrapperCol={{span:20}}\n                        name={[field.name, 'population']}\n                        fieldKey={[field.fieldKey, 'population']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"region population\" style={{width: '80%'}} />\n                    </FormItem>\n\n                    <FormItem\n\n                        name={[field.name, 'connections']}\n                        fieldKey={[field.fieldKey, 'connections']}\n                        label=\"Connected to\"\n                        rules={[\n                        {\n                            required: false,\n                            message: 'Please select the connected regions!',\n                            type: 'array',\n                        },\n                        ]}\n                    >\n                        <Select mode=\"multiple\" placeholder=\"Please select favourite colors\">\n                            {fields.map(f => f.key === field.key ? null : (\n                                <Option value={f.key}>Region {f.key}</Option>\n                            ))}\n                        </Select>\n                    </FormItem>\n                </FormItem>\n            </Panel>\n        </Collapse>\n    )\n}\n\nfunction Vaccination() {\n    return(\n        <>\n            <FormItem \n                label=\"Strategy\"\n                name=\"vaccination_strategy\"\n            >\n                <Radio.Group>\n                    <Radio.Button value=\"none\">None</Radio.Button>\n                    <Radio.Button value=\"random\">Random</Radio.Button>\n                </Radio.Group>\n            </FormItem>\n            <FormItem\n                label=\"Start time\"\n                name=\"T_v\"\n            >\n                <Input />\n            </FormItem>\n            <FormItem\n                label=\"Vaccines available per time step\"\n                labelCol={{ span: 24 }}\n                name=\"n_v\"\n                style={{ display: 'flex', flexDirection: 'column', marginLeft: '11px'}}\n            >\n                <Input style={{width: '256px'}}/>\n            </FormItem>\n        </>\n    )\n}\n\nfunction AgentGroup({fields, field, remove}) {\n    const formatter = (value) => {\n        return `${value}%`;\n    }\n    const marks = {\n        0: '0',\n        20: '20',\n        40: '40',\n        60: '60',\n        80: '80',\n        100: '100',\n    }\n\n    return(\n        <Collapse>\n            <Panel header={`Group ${field.key}`} key={field.key}                 extra={\n                    fields.length > 1 ? (\n                    <MinusCircleOutlined\n                    className=\"dynamic-delete-button\"\n                    onClick={() => remove(field.name)} \n                    />) : null\n                    }> \n                <FormItem\n                    {...formItemLayout}\n                    // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    // label={index === 0 ? 'Label' : ''}\n                    required={false}\n                    key={field.key}\n                    noStyle\n                >\n                    <FormItem\n                        {...field}\n                        label=\"Infection Attempts\"\n                        labelCol={{span: 14}}\n                        wrapperCol={{span:20}}                        \n                        name={[field.name, 'n_i']}\n                        fieldKey={[field.fieldKey, 'n_i']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infection Attempts (Asymptomatic)\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:20}}                        \n                        name={[field.name, 'n_ai']}\n                        fieldKey={[field.fieldKey, 'n_ai']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Susceptibility\"\n                        labelCol={{span: 10}}\n                        wrapperCol={{span:24}}                        \n                        name={[field.name, 'susceptibility']}\n                        fieldKey={[field.fieldKey, 'susceptibility']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infectiousness\"\n                        labelCol={{span: 11}}\n                        wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_i']}\n                        fieldKey={[field.fieldKey, 'p_i']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infectiousness Asymptomatic\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_ai']}\n                        fieldKey={[field.fieldKey, 'p_ai']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Travel Probability\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_t']}\n                        fieldKey={[field.fieldKey, 'p_t']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Travel Probability (Asymptomatic)\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_at']}\n                        fieldKey={[field.fieldKey, 'p_at']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Vaccine Effectiveness\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_v']}\n                        fieldKey={[field.fieldKey, 'p_v']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Vaccine Duration\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'd_v']}\n                        fieldKey={[field.fieldKey, 'd_v']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infection Duration\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'd_i']}\n                        fieldKey={[field.fieldKey, 'd_i']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infection Duration (Asymptomatic)\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'd_ai']}\n                        fieldKey={[field.fieldKey, 'd_ai']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Probability of becoming asymptomatic\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'a_p']}\n                        fieldKey={[field.fieldKey, 'a_p']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                         <Slider   \n                            tipFormatter={formatter}\n                                marks={marks}\n                        />\n                    </FormItem>\n                </FormItem>\n            </Panel>\n        </Collapse>\n    )\n}\n\n\n\nfunction SimulationForm() {\n    const [vaccineOnOff, setVaccine] = useState(false);\n\n    const onFinish = (values) => {\n        console.log(\"Success:\", values);\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n    \n    const onVaccinationSwitch = (checked) => {\n        console.log(\"vaccine was set to: \", vaccineOnOff)\n        console.log(`switch to ${checked}`);\n        setVaccine(checked);\n        console.log(\"vaccine is  set to: \", vaccineOnOff)\n    }\n\n    return(\n        <>\n            <Form\n                {...layout}\n                name=\"basic\"\n                initialValues={{\n                    T: 100,\n                    regions: [{\n                        graph_type: \"nw_small_world\",\n                        population: \"12\",\n                        connections: []\n                    }],\n                    agent_groups: [\n                        {\n                            a_p: 30,\n                            d_ai: \"14\",\n                            d_i: \"13\",\n                            d_v: \"12\",\n                            n_ai: \"20\",\n                            n_i: \"10\",\n                            p_ai: 41,\n                            p_at: 50,\n                            p_i: 22,\n                            p_t: 38,\n                            p_v: 24\n                        }\n                    ]\n\n                }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n            > \n                <Collapse accordion ghost expandIconPosition=\"right\">\n                    <Panel header=\"General Settings\" key=\"gen-set\">\n                        <FormItem \n                            label=\"Timesteps\"\n                            name=\"T\"\n                        >\n                            <Input />\n                        </FormItem>\n                        <FormItem \n                            label=\"Initial Infections\"\n                            labelCol= {{span: 11}}\n                            name=\"initial_infections\"\n                        >\n                            <Input />\n                        </FormItem>\n                        <FormItem \n                            label=\"Vaccination\"\n                            name=\"isVaccinating\"\n                        >\n                            <Switch onChange={onVaccinationSwitch}/>\n                        </FormItem>\n                        {\n                            vaccineOnOff && <Vaccination />\n                        }\n                    </Panel>\n                    <Panel header=\"Regions\" key=\"regions-set\"> \n                        <FormList\n                            name=\"regions\"\n                        >\n                            {(fields, {add, remove}, { errors }) => (\n                                <>\n                                    <Collapse accordion>\n\n                                    {fields.map((field, index) => (\n                                        <Region fields={fields} field={field} remove={remove}/>\n                                    ))}\n                                    </Collapse>\n                                    <FormItem>\n                                        <Button\n                                            type=\"dashed\"\n                                            onClick={() => add()}\n                                            style={{width: '100%'}}\n                                            icon={<PlusOutlined />}\n                                        >\n                                            Add Region\n                                        </Button>\n                                    </FormItem>\n                                </>\n                            )}    \n                        </FormList>    \n\n                    </Panel>\n                    <Panel header=\"Agent Groups\" key=\"groups-set\">    \n                        <FormList\n                            name=\"agent_groups\"\n                        >\n                            {(fields, {add, remove}, { errors }) => (\n                                <>\n                                    <Collapse accordion>\n                                    {fields.map((field, index) => (\n                                        <AgentGroup fields={fields} field={field} remove={remove}/>\n                                    ))}\n                                    </Collapse>\n                                    <FormItem>\n                                        <Button\n                                            type=\"dashed\"\n                                            onClick={() => add()}\n                                            style={{width: '100%'}}\n                                            icon={<PlusOutlined />}\n                                        >\n                                            Add Group\n                                        </Button>\n                                    </FormItem>\n                                </>\n                            )}    \n                        </FormList>  \n                    </Panel>\n                </Collapse>\n                 \n                <FormItem {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </FormItem>   \n            </Form>\n\n        </>\n    );\n}\n\nexport default SimulationForm;\n",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":17,"nodeType":"116","messageId":"117","endLine":2,"endColumn":28},{"ruleId":"114","severity":1,"message":"118","line":2,"column":30,"nodeType":"116","messageId":"117","endLine":2,"endColumn":39},{"ruleId":"114","severity":1,"message":"119","line":2,"column":41,"nodeType":"116","messageId":"117","endLine":2,"endColumn":47},{"ruleId":"114","severity":1,"message":"120","line":2,"column":49,"nodeType":"116","messageId":"117","endLine":2,"endColumn":57},{"ruleId":"114","severity":1,"message":"121","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":14},{"ruleId":"114","severity":1,"message":"122","line":4,"column":13,"nodeType":"116","messageId":"117","endLine":4,"endColumn":15},{"ruleId":"114","severity":1,"message":"123","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"124","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":13},{"ruleId":"114","severity":1,"message":"125","line":7,"column":8,"nodeType":"116","messageId":"117","endLine":7,"endColumn":12},{"ruleId":"114","severity":1,"message":"126","line":9,"column":8,"nodeType":"116","messageId":"117","endLine":9,"endColumn":17},{"ruleId":"114","severity":1,"message":"127","line":25,"column":7,"nodeType":"116","messageId":"117","endLine":25,"endColumn":13},{"ruleId":"114","severity":1,"message":"128","line":28,"column":7,"nodeType":"116","messageId":"117","endLine":28,"endColumn":17},{"ruleId":"114","severity":1,"message":"129","line":29,"column":9,"nodeType":"116","messageId":"117","endLine":29,"endColumn":17},{"ruleId":"114","severity":1,"message":"130","line":8,"column":15,"nodeType":"116","messageId":"117","endLine":8,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":12,"column":8,"nodeType":"133","endLine":12,"endColumn":10,"suggestions":"134"},{"ruleId":"131","severity":1,"message":"135","line":16,"column":8,"nodeType":"133","endLine":16,"endColumn":14,"suggestions":"136"},{"ruleId":"114","severity":1,"message":"137","line":31,"column":23,"nodeType":"116","messageId":"117","endLine":31,"endColumn":30},{"ruleId":"114","severity":1,"message":"115","line":2,"column":17,"nodeType":"116","messageId":"117","endLine":2,"endColumn":28},{"ruleId":"114","severity":1,"message":"118","line":2,"column":30,"nodeType":"116","messageId":"117","endLine":2,"endColumn":39},{"ruleId":"114","severity":1,"message":"119","line":2,"column":41,"nodeType":"116","messageId":"117","endLine":2,"endColumn":47},{"ruleId":"114","severity":1,"message":"120","line":2,"column":49,"nodeType":"116","messageId":"117","endLine":2,"endColumn":57},{"ruleId":"114","severity":1,"message":"138","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":20},{"ruleId":"114","severity":1,"message":"139","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":17},{"ruleId":"114","severity":1,"message":"127","line":20,"column":7,"nodeType":"116","messageId":"117","endLine":20,"endColumn":13},{"ruleId":"114","severity":1,"message":"128","line":23,"column":7,"nodeType":"116","messageId":"117","endLine":23,"endColumn":17},{"ruleId":"114","severity":1,"message":"129","line":24,"column":9,"nodeType":"116","messageId":"117","endLine":24,"endColumn":17},{"ruleId":"114","severity":1,"message":"140","line":27,"column":9,"nodeType":"116","messageId":"117","endLine":27,"endColumn":22},{"ruleId":"114","severity":1,"message":"141","line":45,"column":9,"nodeType":"116","messageId":"117","endLine":45,"endColumn":14},{"ruleId":"110","replacedBy":"142"},{"ruleId":"112","replacedBy":"143"},{"ruleId":"114","severity":1,"message":"144","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":21},{"ruleId":"114","severity":1,"message":"145","line":3,"column":23,"nodeType":"116","messageId":"117","endLine":3,"endColumn":42},{"ruleId":"114","severity":1,"message":"146","line":3,"column":44,"nodeType":"116","messageId":"117","endLine":3,"endColumn":54},{"ruleId":"114","severity":1,"message":"147","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"148","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":15},{"ruleId":"114","severity":1,"message":"149","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":22},{"ruleId":"114","severity":1,"message":"150","line":5,"column":24,"nodeType":"116","messageId":"117","endLine":5,"endColumn":38},{"ruleId":"114","severity":1,"message":"151","line":5,"column":40,"nodeType":"116","messageId":"117","endLine":5,"endColumn":60},{"ruleId":"114","severity":1,"message":"152","line":12,"column":9,"nodeType":"116","messageId":"117","endLine":12,"endColumn":16},{"ruleId":"114","severity":1,"message":"153","line":14,"column":5,"nodeType":"116","messageId":"117","endLine":14,"endColumn":13},{"ruleId":"114","severity":1,"message":"128","line":44,"column":5,"nodeType":"116","messageId":"117","endLine":44,"endColumn":15},{"ruleId":"131","severity":1,"message":"154","line":61,"column":15,"nodeType":"155","endLine":65,"endColumn":6},{"ruleId":"131","severity":1,"message":"156","line":65,"column":8,"nodeType":"133","endLine":65,"endColumn":10,"suggestions":"157"},{"ruleId":"114","severity":1,"message":"158","line":9,"column":7,"nodeType":"116","messageId":"117","endLine":9,"endColumn":11},{"ruleId":"114","severity":1,"message":"159","line":34,"column":9,"nodeType":"116","messageId":"117","endLine":34,"endColumn":35},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'Circle' is defined but never used.","'d3' is defined but never used.","'BarChart' is defined but never used.","'svg' is defined but never used.","'data' is defined but never used.","'LineGraph' is defined but never used.","'myData' is assigned a value but never used.","'randomData' is assigned a value but never used.","'getColor' is assigned a value but never used.","'svg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.","ArrayExpression",["162"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["163"],"'average' is assigned a value but never used.","'ForceGraph2D' is defined but never used.","'Dashboard' is defined but never used.","'getStateColor' is assigned a value but never used.","'fgRef' is assigned a value but never used.",["160"],["161"],"'managerData' is defined but never used.","'nationalAverageData' is defined but never used.","'yearLabels' is defined but never used.","'Button' is defined but never used.","'classes' is defined but never used.","'UserOutlined' is defined but never used.","'LaptopOutlined' is defined but never used.","'NotificationOutlined' is defined but never used.","'SubMenu' is assigned a value but never used.","'testData' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.",["164"],"'text' is assigned a value but never used.","'formItemLayoutWithOutLabel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [height, width]",{"range":"171","text":"172"},"Update the dependencies array to be: [data, draw]",{"range":"173","text":"174"},"Update the dependencies array to be: [updateData]",{"range":"175","text":"176"},[338,340],"[height, width]",[389,395],"[data, draw]",[1784,1786],"[updateData]"]